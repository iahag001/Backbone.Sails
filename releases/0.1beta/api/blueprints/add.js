// Generated by CoffeeScript 1.6.3
(function() {
  var actionUtil, async, _;

  actionUtil = require('./helpers/actionUtil');

  _ = require('lodash');

  async = require('async');

  module.exports = function(req, res) {
    var ChildModel, Model, associationAttr, child, childPkAttr, createdChild, parentPk, relation, supposedChildPk, _base, _base1;
    Model = actionUtil.parseModel(req);
    relation = req.options.alias;
    if (!relation) {
      res.serverError(new Error('Missing required route option, `req.options.alias`.'));
    }
    parentPk = req.param('parentid');
    associationAttr = _.findWhere(Model.associations, {
      alias: relation
    });
    ChildModel = sails.models[associationAttr.collection];
    childPkAttr = ChildModel.primaryKey;
    child = void 0;
    supposedChildPk = actionUtil.parsePk(req);
    if (supposedChildPk) {
      child = {};
      child[childPkAttr] = supposedChildPk;
    } else {
      if ((_base = req.options).values == null) {
        _base.values = {};
      }
      if ((_base1 = req.options.values).blacklist == null) {
        _base1.blacklist = ['limit', 'skip', 'sort', 'where', 'id', 'parentId'];
      }
      child = actionUtil.parseValues(req);
      if (!child) {
        res.badRequest('You must specify the record to add (either the primary key of an existing record to link, or a new object without a primary key which will be used to create a record then link it.)');
      }
      child = actionUtil.flattenAssociations(child, ChildModel);
    }
    createdChild = false;
    return async.auto({
      parent: function(cb) {
        return Model.findOne(parentPk).exec(function(err, parentRecord) {
          if (err) {
            return cb(err);
          }
          if (!parentRecord) {
            return cb({
              status: 404
            });
          }
          if (!parentRecord[relation]) {
            return cb({
              status: 404
            });
          }
          return cb(null, parentRecord);
        });
      },
      child: [
        'parent', function(cb) {
          var createChild;
          createChild = function() {
            return ChildModel.create(child).exec(function(err, newChildRecord) {
              if (err) {
                return cb(err);
              }
              if (req._sails.hooks.pubsub) {
                if (req.isSocket) {
                  ChildModel.subscribe(req, newChildRecord);
                  ChildModel.introduce(newChildRecord);
                }
                ChildModel.publishCreate(newChildRecord, !req.options.mirror && req);
              }
              createdChild = true;
              return cb(null, newChildRecord);
            });
          };
          if (child[childPkAttr]) {
            return ChildModel.findOne(child[childPkAttr]).exec(function(err, childRecord) {
              if (err) {
                cb(err);
              }
              if (!childRecord) {
                return createChild();
              }
              return cb(null, childRecord);
            });
          } else {
            return createChild();
          }
        }
      ],
      add: [
        'parent', 'child', function(cb, data) {
          var coll, err, mirrorAlias;
          try {
            coll = data.parent[relation];
            coll.add(data.child[childPkAttr]);
            if ((mirrorAlias = actionUtil.mirror(Model, relation))) {
              coll = data.parent[mirrorAlias];
              coll.add(data.child[childPkAttr]);
            }
            return cb();
          } catch (_error) {
            err = _error;
            if (err) {
              return cb(err);
            }
            return cb();
          }
        }
      ]
    }, function(err, data) {
      if (err) {
        return res.negotiate(err);
      }
      return data.parent.save(function(err) {
        var isDuplicateInsertError, mirrorAlias, query, _ref;
        isDuplicateInsertError = (err != null ? (_ref = err[0]) != null ? _ref.type : void 0 : void 0) === 'insert';
        if (err && !isDuplicateInsertError) {
          return res.negotiate(err);
        }
        if (!isDuplicateInsertError && req._sails.hooks.pubsub) {
          Model.publishAdd(data.parent[Model.primaryKey], relation, data.child[childPkAttr], !req.options.mirror && req, {
            noReverse: createdChild
          });
          if ((mirrorAlias = actionUtil.mirror(Model, relation))) {
            Model.publishAdd(data.parent[Model.primaryKey], mirrorAlias, data.child[childPkAttr], !req.options.mirror && req, {
              noReverse: createdChild
            });
          }
        }
        query = Model.findOne(parentPk);
        query = actionUtil.populateEach(query, req);
        return query.exec(function(err, parentRecord) {
          if (err) {
            return res.serverError(err);
          }
          if (!parentRecord) {
            return res.serverError();
          }
          if (req._sails.hooks.pubsub && req.isSocket) {
            Model.subscribe(req, parentRecord);
            actionUtil.subscribeDeep(req, parentRecord);
          }
          if (createdChild) {
            res.set("created", JSON.stringify(data.child));
          }
          parentRecord = actionUtil.populateNull(parentRecord, req);
          return res.ok(parentRecord);
        });
      });
    });
  };

}).call(this);
